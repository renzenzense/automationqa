{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2024-10-02T08:13:47.598Z",
    "end": "2024-10-02T08:14:42.617Z",
    "duration": 55019,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0824fc70-8364-42f1-96af-635ecdccc646",
      "title": "",
      "fullFile": "/Users/renzlauren/Desktop/seleniumDemo/test/paramTest.js",
      "file": "/test/paramTest.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "355eac2a-1e73-46e7-b077-179d45587504",
          "title": "add another todo test",
          "fullFile": "/Users/renzlauren/Desktop/seleniumDemo/test/paramTest.js",
          "file": "/test/paramTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully adds a todo to for browser Chrome, 93.0, Windows 10",
              "fullTitle": "add another todo test successfully adds a todo to for browser Chrome, 93.0, Windows 10",
              "timedOut": null,
              "duration": 17501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chai = await import(\"chai\");\nconst should = chai.should();\nltCapabilities.capability.platformName = os\nltCapabilities.capability.browserName = browser\nltCapabilities.capability.browserVersion = bVersion\n\n// let driver = await new Builder().forBrowser(\"chrome\").build();\n\nltCapabilities.capability[\"LT:Options\"].name = this.test.title; // specify test scenario\ndriver = new Builder()\n.usingServer(gridURL)\n.withCapabilities(ltCapabilities.capability)\n.build();\n\ntry {\n    await driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n    await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n    \n    let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n        return value;\n    });\n    \n    todoText.should.equal(\"Learn Selenium\");\n    \n    await driver.quit();\n    \n} catch (error) {\n    console.error(\"Error during test execution:\", error);\n    throw error;  // Ensure Mocha catches the failure\n}",
              "err": {},
              "uuid": "36c0f867-db92-4c17-8101-39576605a0dd",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "successfully adds a todo to for browser Firefox, 91.0, Windows 10",
              "fullTitle": "add another todo test successfully adds a todo to for browser Firefox, 91.0, Windows 10",
              "timedOut": null,
              "duration": 17385,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chai = await import(\"chai\");\nconst should = chai.should();\nltCapabilities.capability.platformName = os\nltCapabilities.capability.browserName = browser\nltCapabilities.capability.browserVersion = bVersion\n\n// let driver = await new Builder().forBrowser(\"chrome\").build();\n\nltCapabilities.capability[\"LT:Options\"].name = this.test.title; // specify test scenario\ndriver = new Builder()\n.usingServer(gridURL)\n.withCapabilities(ltCapabilities.capability)\n.build();\n\ntry {\n    await driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n    await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n    \n    let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n        return value;\n    });\n    \n    todoText.should.equal(\"Learn Selenium\");\n    \n    await driver.quit();\n    \n} catch (error) {\n    console.error(\"Error during test execution:\", error);\n    throw error;  // Ensure Mocha catches the failure\n}",
              "err": {},
              "uuid": "7871110b-223b-46a4-8111-916ed5d1676b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "successfully adds a todo to for browser Firefox, 90.0, Windows 10",
              "fullTitle": "add another todo test successfully adds a todo to for browser Firefox, 90.0, Windows 10",
              "timedOut": null,
              "duration": 19803,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chai = await import(\"chai\");\nconst should = chai.should();\nltCapabilities.capability.platformName = os\nltCapabilities.capability.browserName = browser\nltCapabilities.capability.browserVersion = bVersion\n\n// let driver = await new Builder().forBrowser(\"chrome\").build();\n\nltCapabilities.capability[\"LT:Options\"].name = this.test.title; // specify test scenario\ndriver = new Builder()\n.usingServer(gridURL)\n.withCapabilities(ltCapabilities.capability)\n.build();\n\ntry {\n    await driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n    await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n    \n    let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n        return value;\n    });\n    \n    todoText.should.equal(\"Learn Selenium\");\n    \n    await driver.quit();\n    \n} catch (error) {\n    console.error(\"Error during test execution:\", error);\n    throw error;  // Ensure Mocha catches the failure\n}",
              "err": {},
              "uuid": "11f2d917-17af-4439-9bc2-01fc797a8ae4",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "36c0f867-db92-4c17-8101-39576605a0dd",
            "7871110b-223b-46a4-8111-916ed5d1676b",
            "11f2d917-17af-4439-9bc2-01fc797a8ae4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 54689,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "/Users/renzlauren/Desktop/seleniumDemo/testReports",
        "reportFilename": "testResults"
      },
      "version": "6.2.0"
    }
  }
}