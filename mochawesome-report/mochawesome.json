{
  "stats": {
    "suites": 2,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-26T01:37:12.359Z",
    "end": "2024-09-26T01:37:23.278Z",
    "duration": 10919,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c12930de-b499-4fcf-a213-4700f3e6a592",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d792c62c-57ef-4d1f-b8c7-7796a30141c6",
          "title": "add another todo test",
          "fullFile": "/Users/renzlauren/Desktop/seleniumDemo/test/secondTest.js",
          "file": "/test/secondTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "succesfully adds another todo to appilication",
              "fullTitle": "add another todo test succesfully adds another todo to appilication",
              "timedOut": null,
              "duration": 10467,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Dynamically import chai\n        const chai = await import(\"chai\");\n        const should = chai.should();\n        // launch browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        try {\n            // navigate to application\n            await driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n            // add a todo entry\n            await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n            // assert\n            let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n                return value;\n            });\n            // assert using chai should\n            todoText.should.equal(\"Learn Selenium\");\n            // close the browser if no error occurs\n            await driver.quit();\n        } catch (error) {\n            // Log the error but keep the browser open for debugging\n            console.error(\"Error during test execution:\", error);\n            process.exit(1); // error counter indicator\n        }",
              "err": {},
              "uuid": "bf9121d4-5dd2-4c22-be4e-e42dd8bad9b7",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bf9121d4-5dd2-4c22-be4e-e42dd8bad9b7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10467,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "5284885a-ac6e-403a-b62c-0e542bfe761a",
          "title": "add todo test",
          "fullFile": "/Users/renzlauren/Desktop/seleniumDemo/test/firstTest.js",
          "file": "/test/firstTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "succesfully adds a todo to appilication",
              "fullTitle": "add todo test succesfully adds a todo to appilication",
              "timedOut": null,
              "duration": 10469,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Dynamically import chai\n        const chai = await import(\"chai\");\n        const should = chai.should();\n        // launch browser\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        try {\n            // navigate to application\n            await driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n            // add a todo entry\n            await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n            // assert\n            let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n                return value;\n            });\n            // assert using chai should\n            todoText.should.equal(\"Learn Selenium\");\n            // close the browser if no error occurs\n            await driver.quit();\n        } catch (error) {\n            // Log the error but keep the browser open for debugging\n            console.error(\"Error during test execution:\", error);\n            process.exit(1); // error counter indicator\n        }",
              "err": {},
              "uuid": "981e1677-7d73-403d-8c87-5fd42b5c3815",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "981e1677-7d73-403d-8c87-5fd42b5c3815"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10469,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}